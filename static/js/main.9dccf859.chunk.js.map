{"version":3,"sources":["posts/img/my-photo.jpg","posts/img/val-playa.jpg","posts/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MY_IMAGE","myPhoto","POST_IMG","postPhoto","Post","props","className","src","alt","author","name","nickname","date","toLocaleDateString","text","post","Date","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,iMCKrCC,EAAWC,IACXC,EAAWC,IA0BFC,MArBf,SAAcC,GACZ,OACE,oCACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eAAeC,IAAKP,EAAUQ,IAAKP,MACjDI,EAAMI,OAAOC,KACd,0BAAMJ,UAAU,iBACbD,EAAMI,OAAOE,SADhB,MACwCN,EAAMO,KAX5CC,uBAcJ,yBAAKP,UAAU,aAAaD,EAAMS,MAElC,yBAAKR,UAAU,aAAaC,IAAKL,EAAUM,IAAKL,UCtBpDY,EAAO,CACXH,KAAM,IAAII,KACVF,KAAK,sCACLL,OAAQ,CACNC,KAAM,gBACNC,SAAU,gBAQCM,MAJf,WACE,OAAO,kBAAC,EAAD,CAAML,KAAMG,EAAKH,KAAME,KAAMC,EAAKD,KAAML,OAAQM,EAAKN,UCD1CS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9dccf859.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/my-photo.848a8616.jpg\";","module.exports = __webpack_public_path__ + \"static/media/val-playa.2b23e44b.jpg\";","import React from \"react\";\r\nimport \"./posts.css\";\r\nimport myPhoto from \"./img/my-photo.jpg\";\r\nimport postPhoto from \"./img/val-playa.jpg\";\r\n\r\nconst MY_IMAGE = myPhoto;\r\nconst POST_IMG = postPhoto;\r\n\r\nfunction formatDate(date) {\r\n  return date.toLocaleDateString();\r\n}\r\nfunction Post(props) {\r\n  return (\r\n    <>\r\n      <div className=\"wrapper\">\r\n        <div className=\"userInfo\">\r\n          <div className=\"post-wrapper\">\r\n            <img className=\"profilePhoto\" src={MY_IMAGE} alt={myPhoto} />\r\n            {props.author.name}\r\n            <span className=\"nickname-date\">\r\n              {props.author.nickname} . {formatDate(props.date)}\r\n            </span>\r\n          </div>\r\n          <div className=\"post-text\">{props.text}</div>\r\n\r\n          <img className=\"post-photo\" src={POST_IMG} alt={postPhoto} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React from \"react\";\nimport Post from \"./posts/post\";\n\nconst post = {\n  date: new Date(),\n  text: `Today was a good day to try to surf`,\n  author: {\n    name: \"Mariia Mytsko\",\n    nickname: \"@Mariia_Myt\",\n  },\n};\n\nfunction App() {\n  return <Post date={post.date} text={post.text} author={post.author} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}